@using Miachyna.Blazor.Services
@using Miachyna.Domain.Entities
@implements IDisposable
@rendermode InteractiveServer

<div class="btn-group" role="group" aria-label="Pager">
    <!-- Previous -->
    <button type="button" class="btn btn-outline-primary
        @(previousEnabled?"":"disabled")"
        @onclick="@(e=>OnPageSelected(ProductService.CurrentPage-1))">
        <span aria-hidden="true">&laquo;</span>
    </button>
    @for (int i = 1; i <= ProductService.TotalPages; i++)
    {
        var temp = i;
        <button type="button" class="btn btn-outline-primary
            @(IsActive(temp)?"active":"")"
            @onclick="@(e=>OnPageSelected(temp))">
            @temp
        </button>
    }
    <!-- Next -->
    <button type="button" class="btn btn-outline-primary
        @(nextEnabled?"":"disabled")"
        @onclick="@(e=>OnPageSelected(ProductService.CurrentPage+1))">
        <span aria-hidden="true">&raquo;</span>
    </button>
</div>

@code {
    [CascadingParameter]
    public IProductService<Cosmetic> ProductService{ get; set; }
    protected override void OnInitialized()
    {
        ProductService.ListChanged += StateHasChanged;
    }

    bool previousEnabled { get => ProductService.CurrentPage != 1; }

    bool nextEnabled
    {
        get => ProductService.CurrentPage != ProductService.TotalPages;
    }

    bool IsActive(int pageNo) => pageNo == ProductService.CurrentPage;

    async void OnPageSelected(int pageNo)
    {
        await ProductService.GetProducts(pageNo);
    }
    public void Dispose()
    {
        ProductService.ListChanged -= StateHasChanged;
    }
}
